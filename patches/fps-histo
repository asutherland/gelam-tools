# HG changeset patch
# Parent 879324d41588f0bc0b4d020aebff2685c71ff321

diff --git a/gfx/layers/opengl/LayerManagerOGL.cpp b/gfx/layers/opengl/LayerManagerOGL.cpp
--- a/gfx/layers/opengl/LayerManagerOGL.cpp
+++ b/gfx/layers/opengl/LayerManagerOGL.cpp
@@ -53,49 +53,64 @@
 #endif
 
 static const double kFpsWindowMs = 250.0;
-static const size_t kNumFrameTimeStamps = 16;
+static const size_t kNumFrameTimeStamps = 120;
+static const size_t kNumHistoBins = 64;
+static const double kBinScaleMS = 2;
 struct FPSCounter {
-  FPSCounter() : mCurrentFrameIndex(0) {}
+  FPSCounter() : mCurrentFrameIndex(0), mLastFrameAt(TimeStamp::Now()), mWarmedUp(false)  {
+    for (size_t i = 0; i < kNumHistoBins; i++) {
+      mHistoBins[i] = 0;
+    }
+  }
 
   // We keep a circular buffer of the time points at which the last K
   // frames were drawn.  To estimate FPS, we count the number of
   // frames we've drawn within the last kFPSWindowMs milliseconds and
   // divide by the amount time since the first of those frames.
-  TimeStamp mFrames[kNumFrameTimeStamps];
+  unsigned char mFrameBins[kNumFrameTimeStamps];
   size_t mCurrentFrameIndex;
+  TimeStamp mLastFrameAt;
+  unsigned char mHistoBins[kNumHistoBins];
+  bool mWarmedUp;
 
   void AddFrame(TimeStamp aNewFrame) {
-    mFrames[mCurrentFrameIndex] = aNewFrame;
-    mCurrentFrameIndex = (mCurrentFrameIndex + 1) % kNumFrameTimeStamps;
-  }
-
-  double AddFrameAndGetFps(TimeStamp aCurrentFrame) {
-    AddFrame(aCurrentFrame);
-    return EstimateFps(aCurrentFrame);
-  }
-
-  double GetFpsAt(TimeStamp aNow) {
-    return EstimateFps(aNow);
+    // Only forget about 
+    if (mWarmedUp) {
+      int lastBin = mFrameBins[mCurrentFrameIndex];
+      mHistoBins[lastBin]--;
+    }
+    unsigned char bin = (unsigned char)
+      NS_MIN((int)(kNumHistoBins - 1),
+             (int)((aNewFrame - mLastFrameAt).ToMilliseconds() / kBinScaleMS));
+    mFrameBins[mCurrentFrameIndex] = bin;
+    mLastFrameAt = aNewFrame;
+    mHistoBins[bin]++;
+    if (++mCurrentFrameIndex == kNumFrameTimeStamps) {
+      mCurrentFrameIndex = 0;
+      if (mWarmedUp) {
+        char buf[kNumHistoBins * 4 + 16];
+        int offset;
+        offset = sprintf(buf, "Frame histo:"); // 13
+        for (size_t i = 0; i < kNumHistoBins; i++) {
+          offset += sprintf(&buf[offset], " %d", mHistoBins[i]);
+        }
+        buf[offset++] = '\n';
+        buf[offset] = '\0';
+#ifdef ANDROID
+        __android_log_write(ANDROID_LOG_INFO, "Gecko", buf);
+#else
+        fprintf(stderr, "%s\n", buf);
+#endif
+      }
+      else {
+        mWarmedUp = true;
+      }
+    }
   }
 
 private:
   double EstimateFps(TimeStamp aNow) {
-    TimeStamp beginningOfWindow =
-      (aNow - TimeDuration::FromMilliseconds(kFpsWindowMs));
-    TimeStamp earliestFrameInWindow = aNow;
-    size_t numFramesDrawnInWindow = 0;
-    for (size_t i = 0; i < kNumFrameTimeStamps; ++i) {
-      const TimeStamp& frame = mFrames[i];
-      if (!frame.IsNull() && frame > beginningOfWindow) {
-        ++numFramesDrawnInWindow;
-        earliestFrameInWindow = NS_MIN(earliestFrameInWindow, frame);
-      }
-    }
-    double realWindowSecs = (aNow - earliestFrameInWindow).ToSeconds();
-    if (realWindowSecs == 0.0 || numFramesDrawnInWindow == 1) {
-      return 0.0;
-    }
-    return double(numFramesDrawnInWindow - 1) / realWindowSecs;
+    return 0.0;
   }
 };
 
@@ -111,7 +126,7 @@
   static void DrawFrameCounter(GLContext* context);
 
   void NotifyShadowTreeTransaction() {
-    mTransactionFps.AddFrame(TimeStamp::Now());
+    //mTransactionFps.AddFrame(TimeStamp::Now());
   }
 };
 
@@ -120,9 +135,10 @@
 FPSState::DrawFPS(TimeStamp aNow,
                   GLContext* context, ShaderProgramOGL* copyprog)
 {
-  int fps = int(mCompositionFps.AddFrameAndGetFps(aNow));
-  int txnFps = int(mTransactionFps.GetFpsAt(aNow));
-
+  mCompositionFps.AddFrame(aNow);
+  //int txnFps = int(mTransactionFps.GetFpsAt(aNow));
+  return;
+  /*
   GLint viewport[4];
   context->fGetIntegerv(LOCAL_GL_VIEWPORT, viewport);
 
@@ -286,6 +302,7 @@
                                 0, texCoords2);
 
   context->fDrawArrays(LOCAL_GL_TRIANGLE_STRIP, 0, 12);
+  */
 }
 
 /**
@@ -682,8 +699,7 @@
         if (!mFPS) {
           mFPS = new FPSState();
         }
-        double fps = mFPS->mCompositionFps.AddFrameAndGetFps(TimeStamp::Now());
-        printf_stderr("HWComposer: FPS is %g\n", fps);
+        mFPS->mCompositionFps.AddFrame(TimeStamp::Now());
       }
 
       // This lets us reftest and screenshot content rendered by the
